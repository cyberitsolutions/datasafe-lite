#!/usr/bin/python3

import argparse
import datetime
import email.mime.text
import email.utils
import os
import subprocess
import sys
import traceback


def main() -> None:
    args = parse_args()
    try:
        sanity_check(args)
        umount(args)  # If we crashed last time and it's still mounted, unmount it.
        fsck(args)
        mount(args)
        usage_report = report_usage(args)
        backup(args)
        umount(args)
    except Exception:
        # Send failure email.
        m = email.mime.text.MIMEText(_failure_template.format(
            hostname=args.hostname,
            date=args.today,
            boring_technical_details=str(traceback.format_exc())))
        m['Subject'] = 'Backup FAILED! - {} Datasafe Lite'.format(args.hostname)
        finish_email(args, m)
        raise
    else:
        # Send success email.
        m = email.mime.text.MIMEText(_success_template.format(
            hostname=args.hostname,
            usage_report=usage_report,
            date=args.today))
        m['Subject'] = 'Backup OK - {} Datasafe Lite'.format(os.uname().nodename)
        finish_email(args, m)
    # NOTE: we cannot put the common email code here, because
    #       the "raise" branch will never reach it.


def parse_args():
    parser = argparse.ArgumentParser()
    parser.add_argument('--label', default='DatasafeLite')
    parser.add_argument('--mountpoint', default='/mnt/DatasafeLite',
                        help='WARNING: config file *MUST* be a subdir of this path')
    parser.add_argument('--config', default='/etc/datasafe-lite.conf')
    # These don't strictly belong here, but it's a convenient place to put them.
    parser.set_defaults(now=datetime.datetime.now())
    parser.set_defaults(today=datetime.date.today())
    parser.set_defaults(hostname=os.uname().nodename)
    return parser.parse_args()


def sanity_check(args) -> None:
    # Crash if rsnapshot config is derp.
    # UPDATE:
    #  "rsnapshot configest" WILL NOT WORK until the drive is mounted, because
    #  it confirms that the destination dir exists — which it won't before mounting.
    #  There's no point doing a configtest AFTER mounting, because
    #  that's when we do the actual rsnapshot run.
    #subprocess.check_call(['rsnapshot', '-c', args.config, 'configtest'])

    # Crash if backup drive doesn't exist.
    subprocess.check_call(['blkid', '-L', args.label], stdout=subprocess.DEVNULL)


def mount(args) -> None:
    subprocess.check_call(['install', '-dm0', '-oroot', '-groot', args.mountpoint])
    subprocess.check_call(['mount', '--label', args.label, args.mountpoint])
    # Put an easy-to-read timestamp onto the drive itself.
    # FIXME: remove newline= after customers have Win 10 1809+.
    with open(os.path.join(args.mountpoint, 'STATUS.txt'), 'w', newline='\r\n') as f:
        print('A Datasafe Lite backup of {} was last attempted on {}'.format(args.hostname, args.now), file=f)


def umount(args) -> None:
    try:
        subprocess.check_output(
            ['umount', 'LABEL={}'.format(args.label)],
            stderr=subprocess.PIPE,
            universal_newlines=True)
    except subprocess.CalledProcessError as e:
        # Debian 10 version of "it's not mounted".
        if (e.returncode == 1 and
            e.stderr == 'umount: LABEL={}: not mounted.\n'.format(args.label)):
            print('<6>ignoring failure to umount an unmounted filesystem', file=sys.stderr, flush=True)
        # Debian 9 version of "it's not mounted".
        elif (e.returncode == 32 and
              e.stderr == 'umount: LABEL={}: mountpoint not found\n'.format(args.label)):
            print('<6>ignoring failure to umount an unmounted filesystem', file=sys.stderr, flush=True)
        # Debian 12 version of "it's not mounted".
        elif (e.returncode == 32 and
            e.stderr == 'umount: LABEL={}: no mount point specified.\n'.format(args.label)):
            print('<6>ignoring failure to umount an unmounted filesystem', file=sys.stderr, flush=True)
        else:
            raise
    try:
        os.rmdir(args.mountpoint)
    except FileNotFoundError:
        print('<6>ignoring failure to remove non-existent directory', file=sys.stderr, flush=True)


def fsck(args) -> None:
    try:
        # FIXME: only e2fsck if last-fsck-time is >1d ago?
        subprocess.check_call(['e2fsck', '-p', 'LABEL={}'.format(args.label)])
    except subprocess.CalledProcessError as e:
        if e.returncode == 1:
            print('<6>fsck file system errors corrected', file=sys.stderr, flush=True)
        else:
            raise


def backup(args) -> None:
    # NOTE: this section is based on
    # datasafe.git:bootstrap:overlay/usr/local/bin/datasafe-rsnapshot-wrapper.
    # See that file for an explanation of why this is so horrible.
    if 1 == args.now.day == args.now.month:  # new year's day
        subprocess.check_call(['rsnapshot', '-c', args.config, 'yearly'])
    if 1 == args.now.day:       # 1st of any month
        subprocess.check_call(['rsnapshot', '-c', args.config, 'monthly'])
    if 1 == args.now.isoweekday():  # Monday
        subprocess.check_call(['rsnapshot', '-c', args.config, 'weekly'])
    try:
        subprocess.check_call(['rsnapshot', '-c', args.config, 'sync'])
    except subprocess.CalledProcessError as e:
        if e.returncode == 2:
            print('<6>some warnings occurred, but the backup still finished', file=sys.stderr, flush=True)
        else:
            raise
    subprocess.check_call(['rsnapshot', '-c', args.config, 'daily'])

    # Put an easy-to-read timestamp onto the drive itself.
    # FIXME: remove newline= after customers have Win 10 1809+.
    with open(os.path.join(args.mountpoint, 'STATUS.txt'), 'a', newline='\r\n') as f:
        print('A Datasafe Lite backup of {} was last completed on {}'.format(args.hostname, datetime.datetime.now()), file=f)


def finish_email(args, m) -> None:
    # FIXME: add more "this is an automatic message" headers, as seen in maxwell.
    m['From'] = 'Datasafe Lite backup script <noreply>'
    m['Date'] = email.utils.formatdate()
    m['To'] = 'root'        # FIXME
    m['CC'] = 'support-{}@cyber.com.au'.format(args.hostname)
    subprocess.run(
        ['/usr/sbin/sendmail', '-oi', '-t'],
        check=True,
        universal_newlines=True,
        input=str(m))


def report_usage(args) -> str:
    s = os.statvfs(args.mountpoint)
    bsize, blocks, bavail = s.f_bsize, s.f_blocks, s.f_bavail
    is_nearly_full = bavail / blocks < 0.20  # <20% avail
    return subprocess.run(
        # FIXME: CPython3.5 has no numfmt equivalent! ☹
        ['numfmt', '--to=si', '--suffix=B', '--field=1,5', '--padding=1'],
        input='{} ({:.0%}) left of {} total{}'.format(
            bavail * bsize,
            bavail / blocks,
            blocks * bsize,
            ' (RUNNING LOW!)' if is_nearly_full else ''),
        stdout=subprocess.PIPE,
        check=True,
        universal_newlines=True).stdout.strip()


_success_template = '''
This is an automated email from the Datasafe Lite script on {hostname}.
It backs up to a portable USB hard drive plugged into {hostname}.

The {date} backup completed successfully.

Space check: {usage_report}

Remember to "rotate" your drives regularly, so that
one drive is always plugged in, and
one drive is always offsite.
'''.strip()

_failure_template = '''
BACKUP FAILED!

This is an automated email from the Datasafe Lite script on {hostname}.
It backs up to a portable USB hard drive plugged into {hostname}.

The {date} backup failed!

For assistance contact https://www.cyberitsolutions.com.au/
The following technical information will help them debug the problem.


{boring_technical_details}
'''.strip()


if __name__ == '__main__':
    main()
